<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-04-13T22:51:21+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">nicolabs</title><subtitle>Work in progress.</subtitle><author><name>nicobo</name></author><entry><title type="html">Bypassing GitHub’s Jekyll limitations</title><link href="http://localhost:4000/2020/Bypassing-GitHub-Jekyll-limitations" rel="alternate" type="text/html" title="Bypassing GitHub's Jekyll limitations" /><published>2020-04-13T00:00:00+02:00</published><updated>2020-04-13T00:00:00+02:00</updated><id>http://localhost:4000/2020/Bypassing-GitHub-Jekyll-limitations</id><content type="html" xml:base="http://localhost:4000/2020/Bypassing-GitHub-Jekyll-limitations">&lt;p&gt;As I feared when I &lt;a href=&quot;/2016/Migrating-from-Drupal-to-Jekyll&quot;&gt;migrated to GitHub’s hosting&lt;/a&gt;, it has become too complicated to overcome GitHub’s limitations on Jekyll plugins and features.&lt;/p&gt;

&lt;p&gt;I just needed to create a &lt;a href=&quot;https://jekyllrb.com/docs/collections/&quot;&gt;&lt;em&gt;collection&lt;/em&gt;&lt;/a&gt; to put my &lt;a href=&quot;/2016/Migrating-from-Drupal-to-Jekyll&quot;&gt;“live drafts”&lt;/a&gt; into it, but the deprecated &lt;em&gt;jekyll-paginate&lt;/em&gt; plugin provided with GitHub pages didn’t support collections.&lt;/p&gt;

&lt;p&gt;I therefore switched to offline-building my site and pushing the generated static files to GitHub, which now serves them without Jekyll processing. I still use Jekyll to generate the final static files, which is perfectly ok.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://help.github.com/en/github/working-with-github-pages/about-github-pages#static-site-generators&quot;&gt;GitHub’s documentation about this&lt;/a&gt; is not very clear on the way one can still use &lt;em&gt;an autonomous&lt;/em&gt; Jekyll installation to build offline, without them building the site with &lt;strong&gt;their&lt;/strong&gt; locked-down Jekyll pipeline.
I assumed that I had to consider the procedure that applied to other tools. I had to :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;create a &lt;code class=&quot;highlighter-rouge&quot;&gt;.nojekyll&lt;/code&gt; file in the root of the repo&lt;/li&gt;
  &lt;li&gt;change &lt;a href=&quot;https://jekyllrb.com/docs/configuration/options/&quot;&gt;Jekyll’s output directory&lt;/a&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;docs&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;use the standard Jekyll dependencies in my &lt;em&gt;Gemfile&lt;/em&gt; and specify the full &lt;a href=&quot;https://github.com/github/pages-gem/blob/master/lib/github-pages/plugins.rb&quot;&gt;list of plugins previously overwritten by github-pages&lt;/a&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;import and commit the code for the submodule &lt;em&gt;mastodon-timeline-widget&lt;/em&gt; inside this repo, not only leaving the &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitmodules&lt;/code&gt; file (static Javascript files that are used in the site, which were pulled automatically during GitHub’s processing)&lt;/li&gt;
  &lt;li&gt;make sure a &lt;code class=&quot;highlighter-rouge&quot;&gt;docs/CNAME&lt;/code&gt; text file containing the domain to serve is present after each build (I discovered &lt;a href=&quot;https://github.com/mkdocs/mkdocs/pull/1497/commits&quot;&gt;it is created when the custom domain is enabled on GitHub&lt;/a&gt; ; unfortunately it is in the output &lt;code class=&quot;highlighter-rouge&quot;&gt;docs/&lt;/code&gt; directory, which may legitimately be deleted with a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll clean&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;I also had to change the name of the repo from &lt;em&gt;nicolabs.github.io&lt;/em&gt; to &lt;em&gt;nicolabs.net&lt;/em&gt; so it is not recognized as a user/organization repo, which was preventing me to put the code in a &lt;code class=&quot;highlighter-rouge&quot;&gt;docs&lt;/code&gt; subdirectory (I already had an &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; which had to be processed by Jekyll in the repo’s root, and therefore the website’s root could not be placed here)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overall it was very easy and quick to migrate !&lt;/p&gt;</content><author><name>nicobo</name></author><category term="blogging" /><category term="jekyll" /><category term="github" /><summary type="html">As I feared when I migrated to GitHub’s hosting, it has become too complicated to overcome GitHub’s limitations on Jekyll plugins and features.</summary></entry><entry><title type="html">My favorite tools I want to tell the world about</title><link href="http://localhost:4000/2019/My-favorite-tools-I-want-to-tell-the-world" rel="alternate" type="text/html" title="My favorite tools I want to tell the world about" /><published>2019-04-27T00:00:00+02:00</published><updated>2020-03-31T00:00:00+02:00</updated><id>http://localhost:4000/2019/My-favorite-tools-I-want-to-tell-the-world</id><content type="html" xml:base="http://localhost:4000/2019/My-favorite-tools-I-want-to-tell-the-world">This page lists some tools I've been using with success for a while : they may fit your needs as well !


## NextCloud

![NextCloud logo](/assets/blog/3rdparty/logos/nextcloud.108x72.png)

[NextCloud](https://nextcloud.com/) (a fork of [OwnCloud](https://owncloud.org/)) is a very promising software that aims to bring usual cloud services to the home.

However, it's based on pluggable features that are not always stable. Here are the ones I'm using on a day-to-day basis :

- web interface to **access my own files** (however synchronization, backup and other features on files are not yet usable in my opinion)
- **share files** with others
- **calendar** (coupled with DAVDroid and any Android calendar it has all features Google Calendar has, except event import from/sharing to email)
- **contacts** (really excellent)
- **news** (use with a RSS/Atom reader on your mobile)

## PlantUML

![PlantUML logo](/assets/blog/3rdparty/logos/plantuml.116x112.png)

[PlantUML](https://plantuml.com/) is a very simple **textual language to create diagrams**.
You describe your diagram as plain text and use any of the provided tool to automatically render a picture.

It is very easy to learn and has integrations with [A LOT](https://plantuml.com/fr/running) of tools.
As the diagrams are simple text blocks, you can save them in a version control system, diff' them, embed them in other documents, copy/paste them in online tools to view and edit, ...
It has several renderers out of the box like PNG, SVG, LaTeX ; you can even generate ASCII art sequence diagrams !

I use it at work in *maven* builds to generate technical or inline documentation, in *Atom* or *Visual Studio Code* for writing specifications, you can live-code architectures with colleagues, build deployment diagrams on the fly within a web page, ...
You will also find several other tools not referenced from the main site but using the same language.

The main drawback is that you don't control the way figures are laid out.
Even with the few tweaks available you may not be able to get a clear view with the biggest diagrams.


## Twidere

![Twidere logo](/assets/blog/3rdparty/logos/twidere.512x512.png){:height=&quot;128px&quot;}

[Twidere](https://github.com/TwidereProject/Twidere-Android) is definitely the only one, perfect, **Twitter** Android client for me (and I've been searching a lot).
It's open source. It handles every single feature I need.

I've been using it for years... And since it happens to be very good also at **Mastodon** I do continue to use it every day.


## Wallabag

![Wallabag logo](/assets/blog/3rdparty/logos/wallabag.200x69.png)

[Wallabag](https://wallabag.org) is an open source alternative to *Pocket*, *Instapaper*, ... to save articles from the web and **read them later**.
There are integrations with web browsers and smartphones.
I've been adding and reading articles with wallabag for years : you don't need another tool !


## More tools

The following ones are part of my toolbox, they will get a small description each in the future :

- Passwordstore
- ForceDoze (Android)
- K-9 Mail
- Silence
- VLC
- Markor (Android) / Bear (iOS)
- FastHub-Libre
- RadioDroid
- AntennaPod
- F-Droid</content><author><name>nicobo</name></author><category term="android" /><category term="cloud" /><category term="diagrams" /><category term="mastodon" /><category term="uml" /><category term="social" /><category term="tooling" /><category term="twitter" /><summary type="html">This page lists some tools I’ve been using with success for a while : they may fit your needs as well !</summary></entry><entry><title type="html">Migrating from Drupal to Jekyll</title><link href="http://localhost:4000/2016/Migrating-from-Drupal-to-Jekyll" rel="alternate" type="text/html" title="Migrating from Drupal to Jekyll" /><published>2016-11-13T00:00:00+01:00</published><updated>2020-03-31T00:00:00+02:00</updated><id>http://localhost:4000/2016/Migrating-from-Drupal-to-Jekyll</id><content type="html" xml:base="http://localhost:4000/2016/Migrating-from-Drupal-to-Jekyll">![Previous blog's banner background](/assets/blog/nicobo-landscape.png)

## New blog concept ?

I write articles about things that required enough amount of work for them to be considered worth sharing.
Writing, in turn, also require a fair amount of work to be comprehensive and accurate enough.

I have to admit however that I don’t have time to write advanced articles as much as I would like to.
Many of them just stay unfinished in a draft state, never published...

Therefore this blog is going to show shorter (and some unfinished) articles !
The good news is that some content that was hidden, in draft state, is going to be live !

A first approach was to simply use a *git* branch to put drafts (usually named 'develop'), then merge them into the 'master' branch ; but that would imply either to publish two blogs : 'draft' and 'release' or to create a mechanism to merge the two branches into the same blog.

I finally opted for a label in each article indicating its *maturity level* :

- &lt;span class=&quot;post-header&quot;&gt;&lt;span class=&quot;post-meta&quot;&gt;&lt;span class=&quot;maturity-label maturity-draft&quot;&gt;draft&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; A *draft* label means something like &quot;This article is in the process of being written, take it carefully as it may be wrong or change tomorrow&quot;. **I don't endorse** the content of such articles even if published, however one may find its content useful in some way...
- &lt;span class=&quot;post-header&quot;&gt;&lt;span class=&quot;post-meta&quot;&gt;&lt;span class=&quot;maturity-label maturity-good&quot;&gt;good&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; An article with a *good* maturity is one that I consider ready for publication, even if it has some minor flaws or missing parts.
- &lt;span class=&quot;post-header&quot;&gt;&lt;span class=&quot;post-meta&quot;&gt;&lt;span class=&quot;maturity-label maturity-stable&quot;&gt;stable&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; *Stable* articles are the ones that have been published for a long time or that I consider rock-solid.
- &lt;span class=&quot;post-header&quot;&gt;&lt;span class=&quot;post-meta&quot;&gt;&lt;span class=&quot;maturity-label maturity-deprecated&quot;&gt;deprecated&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; Some articles may explicitly be labeled as *deprecated* in order to emphasize the fact that they have deprecated content and should only be considered by people living in the past. Deprecation might not be a concept that suits perfectly within a maturity life cycle like previous labels, but for now I prefer keeping things simple and not using another tagging system.

Please note that some articles may show a *stable* maturity while talking about *deprecated* things. This is because an article may still be relevant even when talking about supplanted technologies, and also because I'm not going to constantly review old articles to check if they're still at the cutting edge... [Scaffolding the Web 2.0](/articles/scaffolding-web-20) is a very good example of that case.

In order to get an idea of the freshness of an article, I therefore print both its *creation* and *last update* times, allowing people to judge by themselves if it's likely to be up-to-date or not.

The paradigm I was fond of is therefore changing : a permanent URL on this blog still leads to the same article, but its content can definitely change (and break referring sources). In order to reference a content at a given fixed time, one can link to the original content on GitHub : there is a link to the full history of each article over their creation and update times labels (try with this one).

Lastly, I still use the [drafts feature of Jekyll](https://jekyllrb.com/docs/drafts/) to prevent publishing of *very* early notes that are just ideas or not even readable... Those can still be viewed in GitHub sources, but are not publicly rendered (I have a special &lt;span class=&quot;post-header&quot;&gt;&lt;span class=&quot;post-meta&quot;&gt;&lt;span class=&quot;maturity-label maturity-unpublished&quot;&gt;unpublished&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; label for myself).


## Migrating paths

Beside changing the concept, I'm also changing the platform, moving from self-hosted Drupal to Jekyll on GitHub Pages.

During this migration I've tried to keep the old URLs still valid by keeping a way to make it through *HTTP redirects*. Mostly for fun.

- Assets (images) are moved to `/assets/blog/...` and specified as is in the markdown sources. I could have used Jekyll's features to insert some variable but I did not want to add too much non-markdown (and framework-specific) code in the articles' source. If the assets were to move again, it should be quite easy to replace all `/assets/blog/...` strings with the correct path.
- I've used Jekyll's `permalink` option to keep the short URL of the articles so I just have to add an *HTTP redirect* to serve the new blog under the old URLs.

There is a screenshot of what the previous blog at [nicobo.net](http://nicobo.net) was looking like : [screenshot](/assets/blog/screenshots/nicobo.net-screenshot-2019-10-26%2020-00-21.png).

## What's lost

From rich HTML to Markdown, I've lost some of the visual/semantic styles I was using : I had to merge or get rid of some of them.

Actually I must say that this does not really look like a bad thing : they were not *critical* to the meaning of the text and it's easier to concentrate on the content itself.

- Lack of underlining in Markdown : I've used *normal* (\*) or **strong** (\*\*) emphasis
- `file names` and `commands` used to have separate styles : although I miss this one a bit, I am now enclosing both of them in back ticks (\`) and saving some seconds thinking about which style to use here.
- I used to have 2 types of block quotes : *notes* and *warnings*. I am now using markdown quotes (&gt;) for both, emphasizing important words for *warnings* types
- Pictures and text layout is now only a vertical flow : I don't really care as it's always been for pure visual left/right/center alignment and I used to spend a significant time building it.
- Most of the visual helps I used to render with CSS are now back as indications in the text. E.g. I could emphasize portions of code to make the reader focus on them ; now I just describe them right before/after the code
- I was using a *main tag* as a category : android, java, ... Although [jekyll supports categories](https://jekyllrb.com/docs/posts/#categories-and-tags), I'm now using only one level of tags for the better : all tags are equals !
- No custom excerpt and picture to advertise an article in the front page (lately I've noticed [Jekyll has this kind of feature](https://jekyllrb.com/docs/posts/#post-excerpts) but for now there is a short excerpt automatically extracted from the first paragraph)
- No integrated internationalization (*i18n*) but I have only few articles in french, all others are in English, and I feel it's not going to be a lot of work to add this feature

## What I like

- Simplicity : the default theme, the generation mechanism, the Markdown language, everything is turned towards simplicity, allowing to concentrate on content.
- This is really close to the ideal blogging platform I was looking for my 'work in progress' blog concept (i.e. even drafts are published and articles are always evolving)
- Integrates very well with Atom and its *git* &amp; *markdown preview* plugins
- Last but not least, it is a very portable platform, since it's just offline generation of HTML files and upload. GitHub automates the build so I don't really upload generated files but to go over some limitations they put on *GitHub Pages* I may simply change hosting and then really push offline-generated content. That's [KISS](https://en.wikipedia.org/wiki/KISS_principle). Also static site generation not limited to Jekyll, [there are other](https://blog.jim-nielsen.com/2018/choosing-a-static-site-generator/) [very promising](https://github.com/myles/awesome-static-generators#photography) engines, even distributed ones...

## What I don't like

- On GitHub Pages there is *only one* theme, *only one* markdown engine : GitHub surely needs to rationalize services it provides but on my side I hope it will not lead to dead ends and migration to another host...
- No *autolink* feature for `kramdown`, the only supported markdown engine on GitHub Pages, which would have saved me from rewriting all links that had just their own URL as text. By the way I therefore rewrote the links' text trimming the redundant &quot;http://&quot; or &quot;www&quot; parts, making the text more readable. For the record, I was able to do this with this single *regular expression* : `s/(https?:\/\/)(www\.)?([^\s$]+)/[$3]($1$2$3)/g`</content><author><name>nicobo</name></author><category term="blogging" /><category term="drupal" /><category term="github" /><category term="jekyll" /><category term="web design" /><summary type="html"></summary></entry><entry><title type="html">Python versus Shell scripting : from experience</title><link href="http://localhost:4000/articles/python-versus-shell-scripting-experience" rel="alternate" type="text/html" title="Python versus Shell scripting : from experience" /><published>2015-11-08T14:24:13+01:00</published><updated>2015-11-08T14:24:13+01:00</updated><id>http://localhost:4000/articles/Python-versus-Shell-scripting-from-experience</id><content type="html" xml:base="http://localhost:4000/articles/python-versus-shell-scripting-experience">![Python vs Shell](/assets/blog/Selection_008.png)

A quick &quot;pros &amp; cons&quot; to choose between Python or Shell scripting, from what I've observed through the years.

This could probably apply to other high level script languages* vs shell.

\* *Like Ruby, but not like Perl, as it shares more with shells from my point of view, like unreadable syntax and execution speed.*

## Choose Python for :

- **its simple syntax** : can be read even by non Python-speaking people. End users may not be scared to change scripts to fit their need.
- **portability** : Python is actually more portable than shell because it's easy to install on any OS. Shell is theoretically portable but it's complicated to explain end users how to install the runtime (e.g. see cygwin). A Python script can be packaged into an executable program. There may be ways to bundle a script with the shell runtime.

## Choose Shell for :

- **speed** : except in case of bad code logic, shell scripts are usually a lot faster than Python's equivalents.
- **its ease to deal with external programs and system** : shell's syntax is already made to test/pipe/chain easily existing programs, whereas Python requires some extra boilerplate. Shell also has built-in functions to deal directly with files and the system, whereas Python uses an object-oriented model, which may not be as handy.</content><author><name>nicobo</name></author><category term="python" /><category term="scripting" /><category term="shell" /><summary type="html"></summary></entry><entry><title type="html">Sass is a CSS compiler</title><link href="http://localhost:4000/2015/Sass-is-a-CSS-compiler" rel="alternate" type="text/html" title="Sass is a CSS compiler" /><published>2015-03-28T17:18:57+01:00</published><updated>2019-04-26T00:00:00+02:00</updated><id>http://localhost:4000/2015/Sass-is-a-CSS-compiler</id><content type="html" xml:base="http://localhost:4000/2015/Sass-is-a-CSS-compiler">![Sass logo](/assets/blog/sass-color-1c4aab2b.png)

A year ago I was very excited to get my hands at _Sass_.

I thought it could fill the gaps in coding with CSS : preventing variables duplications, automatic generation of multiple static stylesheets depending on the rendering device (vs using media queries which are not always supported and require downloading all versions of the code)...

But it could not.

## What really is Saas

[Sass-lang.com](http://sass-lang.com/) states it is a &quot;CSS extension language&quot;, but don't take it literaly or you will head straight for failure.

That would imply that Sass adds instructions to the CSS language ; however it's not right because web browsers today only understand CSS, not Sass.

Sass is nothing but dynamic : it's a pre-processor that may only really be used to offline-produce different versions of a CSS with different sizes, colors and layouts, but it's not able to make your CSS dynamic. It's just several static versions of CSS that you must still dynamically/selectively load using an external mechanism (like static media queries or Javascript).

I fell into this trap as I tried to organize stylesheets with inheritance like in **o**bject **o**riented languages (_OO_) : this structure would always failed at a given point.

For instance : as variables only live in the Sass context, and disappear in the compiled CSS, if you want to make two versions of a stylesheet with different values of the same variable, you only have one option : build a CSS block or stylesheet for each value. There is no added value using Sass variables in media queries because they will just be replaced with their static, final value.

## Conclusion

Make no mistake : Sass is a very helpful evolution for CSS, **use it**, but **know its limits** !

## References

- [designshack.net/articles/css/sass-and-media-queries-what-you-can-and-cant-do](http://designshack.net/articles/css/sass-and-media-queries-what-you-can-and-cant-do/)
- [thesassway.com/intermediate/responsive-web-design-part-2](http://www.thesassway.com/intermediate/responsive-web-design-part-2)</content><author><name>nicobo</name></author><category term="css" /><category term="graphism" /><category term="media queries" /><category term="sass" /><category term="web design" /><summary type="html"></summary></entry><entry><title type="html">Scaffolding the Web 2.0</title><link href="http://localhost:4000/articles/scaffolding-web-20" rel="alternate" type="text/html" title="Scaffolding the Web 2.0" /><published>2015-01-29T23:52:38+01:00</published><updated>2015-01-29T23:52:38+01:00</updated><id>http://localhost:4000/articles/Scaffolding-the-Web-2.0</id><content type="html" xml:base="http://localhost:4000/articles/scaffolding-web-20">## Starting up with Web 2.0 development ?

Let's choose between three essentials tools to begin a new project !

![h5bp](/assets/blog/h5bp.png){:class=&quot;inline&quot; height=&quot;120px&quot; width=&quot;120px&quot;} ![initializr](/assets/blog/html5-logo-165.png){:class=&quot;inline&quot; height=&quot;120px&quot; width=&quot;120px&quot;} ![yeoman](/assets/blog/yeoman.png){:class=&quot;inline&quot; height=&quot;120px&quot; width=&quot;120px&quot;}

## ![H5BP logo (star)](/assets/blog/h5bp-logo.png){:class=&quot;inline&quot; style=&quot;vertical-align:middle;&quot;} HTML5 Boilerplate

**HTML5 Boilerplate** (a.k.a. _H5BP_) is the original scaffolding tool by Paul Irish &amp; Co (will have to search for the exact history...).

It allows you to build a clean website structure with standard features based on best practices like :

- responsive design-ready CSS
- standard javascript libraries : Modernizr, Respond.js, ...
- 404 page
- Google Analytics
- favicons for apple
- many more...

It does not support CSS preprocessing (SASS, ...) and requires you some effort to upgrade to the latest version later (by separating your work from the original files that will be upgraded)...

It's good for **small** sites.

Find it at [html5boilerplate.com](http://html5boilerplate.com)


## ![Initializr logo](/assets/blog/html5-logo-165.png){:class=&quot;inline&quot; style=&quot;vertical-align:middle;&quot; height=&quot;80px&quot;} Initializr

While _H5BP_ is a static project template to download, **Initializr** allows you to customize it by selecting the features you want on your site and then downloading the generated files.

It has 3 ready-to-use configurations :

- Classic H5BP
- Responsive (using a custom framework by [@verekia](https://github.com/verekia))
- (Twitter) Bootstrap

The customization is made online and on-the-fly : you can see the generated files directly online while filtering the features (&quot;What's inside&quot; button).
It still does not support CSS preprocessing.

Since it's simply a &quot;configurator&quot; over H5BP I find it **more convenient** than H5BP alone **for small sites**.

Find it at [initializr.com](http://www.initializr.com)


## ![Yeoman logo](/assets/blog/yeoman-1.svg){:class=&quot;inline&quot; style=&quot;vertical-align:middle;&quot; height=&quot;80px&quot;} Yeoman

To solve the &quot;static template&quot; issue, _H5BP_ first evolved into &quot;[generator-mobile-boilerplate](https://github.com/h5bp/generator-mobile-boilerplate)&quot;, then into several specialized tools now known as &quot;**Yeoman**&quot;.

Those tools bring the features you usually want on any project :

- **yo** scaffolds your project (like a _Maven archetype_)
- **Grunt** and **Gulp** build and execute it (like _Maven_ / _Ant_)
- **Bower** and **npm** handle dependencies (like _Maven_ / _Ivy_)

In short, Yeoman is the **standard**, complete tool suite for Web 2.0 developers like Maven is for Java developers.

Find it at [yeoman.io](http://yeoman.io)</content><author><name>nicobo</name></author><category term="ant" /><category term="bower" /><category term="grunt" /><category term="gulp" /><category term="h5bp" /><category term="HTML5" /><category term="initializr" /><category term="java" /><category term="maven" /><category term="npm" /><category term="sass" /><category term="scaffolding" /><category term="web design" /><category term="yeoman" /><category term="yo" /><summary type="html">Starting up with Web 2.0 development ?</summary></entry><entry><title type="html">Pinned PortableApps on Windows 7</title><link href="http://localhost:4000/articles/pinned-portableapps-windows-7" rel="alternate" type="text/html" title="Pinned PortableApps on Windows 7" /><published>2014-05-20T09:10:45+02:00</published><updated>2014-05-20T09:10:45+02:00</updated><id>http://localhost:4000/articles/Pinned-PortableApps-on-Windows-7</id><content type="html" xml:base="http://localhost:4000/articles/pinned-portableapps-windows-7">If you are using _PortableApps_, you might have noticed that some programs like _Firefox_ or _PuTTY_ launched from Windows 7's task bar starts the system wide installation instead of the PortableApps's one.

This is because when you pin a program to the task bar, it uses the executable of the current process, and with _PortableApps_ this executable is not the same as the launcher, which takes care of loading the portable configuration.

![Putty shortcut](/assets/blog/win7_taskbar_pinned_putty.png)

=&gt; edit the shortcut to use the parent executable, like `C:\Tools\PortablePuTTY\PortablePuTTY.exe` for instance.

See [answers.microsoft.com/en-us/windows/forum/windows_7-desktop/windows-7-taskbar-pinned-items-have-disappeared/a978bf01-e4ce-4a53-ac42-cfcef1aca00](http://answers.microsoft.com/en-us/windows/forum/windows_7-desktop/windows-7-taskbar-pinned-items-have-disappeared/a978bf01-e4ce-4a53-ac42-cfcef1aca00)</content><author><name>nicobo</name></author><category term="portable" /><category term="PortableApps" /><category term="tooling" /><category term="Windows" /><summary type="html">If you are using PortableApps, you might have noticed that some programs like Firefox or PuTTY launched from Windows 7’s task bar starts the system wide installation instead of the PortableApps’s one.</summary></entry><entry><title type="html">How to cook an egg with a Gimp</title><link href="http://localhost:4000/articles/how-cook-egg-gimp" rel="alternate" type="text/html" title="How to cook an egg with a Gimp" /><published>2013-06-15T13:44:22+02:00</published><updated>2013-06-15T13:44:22+02:00</updated><id>http://localhost:4000/articles/How-to-cook-an-egg-with-a-Gimp</id><content type="html" xml:base="http://localhost:4000/articles/how-cook-egg-gimp">![The egg evolves !](/assets/blog/egg-evolution_0.png)

Here is a tutorial to draw an egg with [Gimp](http://www.gimp.org/).

With the following techniques, you will be able to build a realistic egg for a serious business **(!)** as well as a cartoonish one typically for a gamification usage **;-)**

You will find the full Gimp source attached to this article, which I invite you to reuse at will.

&gt; Being a casual user of Gimp, there might be better approaches to get it done.
&gt; For instance, if you're looking for a way to quickly build a textured egg, have a look at this tutorial : [gimptalk.com/index.php?/topic/1659-making-empty-broken-egg-shell-in-gimp](http://www.gimptalk.com/index.php?/topic/1659-making-empty-broken-egg-shell-in-gimp/)

## The shape

The first step is to draw the shape of our egg.

You can do it in different ways :

- Reuse an existing template (this is what I've done for this tutorial : [elledemai.blogspot.fr/2009/03/tutoriel-uf-et-cu-happy-eggs.html](http://elledemai.blogspot.fr/2009/03/tutoriel-uf-et-cu-happy-eggs.html))
- Use a dedicated plug-in (e.g. [gimpchat.com/viewtopic.php?f=9&amp;t=7038](http://www.gimpchat.com/viewtopic.php?f=9&amp;t=7038))
- Use the Ellipse tool in combination with others (not tested)
- Directly use the Sphere designer tool (not tested)
- ...

As all subsequent steps depend on this one, make sur you get the exact shape you want before going on the next chapter. Especially check that the image resolution is high enough.

If you need a high resolution I would suggest you build your own image from scratch, as the attached Gimp source is quite low-res. You could use the aforementioned plugin for instance.
As an example, for Android application icons, [a 864x864 resolution is recommended](https://developer.android.com/guide/practices/ui_guidelines/icon_design.html#design-tips).

![The egg is taking shape...](/assets/blog/shape.png)

## The volume

The main idea to simulate a volume is to apply a shading (yes : in drawing, everything is impression !).

&gt; This part of the tutorial probably deserves some enhancement because it has the undesired side effect to blacken colors instead of darkening them. The &quot;Sphere designer&quot; tool might be of a great help to solve this issue (see link at the end).

### The edges

To create this volume effect we are first going to select the drawn shapeand apply the _&quot;Light and Shadow &gt; Drop Shadow&quot;_ filter with a null offset (x=0, y=0).
This will make the edges visibly come out of the sheet.

![The egg is MORE that an surface...](/assets/blog/pictures/edges.png)

### The surface

In order to suggest the plumper shape of the egg, we are going to add a new shading, this time made with another technique : we will create a light effect that we will transform into a darkening effect.

In order to do this, select the _&quot;Light and Shadow &gt; Lighting Effects&quot;_ filter and tune the parameters to get the desired effect. The integrated preview of this plug-in is very useful..

For this tutorial I've put the light source right at the center of the egg and tuned the parameters so that the light quickly disappear on its edges.

Once the effect applied, choose menu _&quot;Color &gt; Color to Alpha&quot;_ and select the color of the light (white, usually) : the picture becomes then an alpha layer that will make the volume appear.

![The egg is round...](/assets/blog/pictures/lighting-shadow.png)

## The lighting

In order to give a realistic appearence, we will add a diffuse light with the _&quot;Light and Shadow &gt; Lighting Effects&quot;_ tool.
It is possible to apply several light sources depending on the final scene where the egg will be put. If the egg is white, chose another lighting color.

As a way to suggest a shiny and bright aspect to the shell, we can add a reflect, simply made of a semi-transparent white ellipse.

![The egg is in the place...](/assets/blog/pictures/lighting.png)

## The cartoon effect

Usually we can give a 'cartoon' effect by adding more importance to the lines.

In our case the first thing to do is to increase the width of the edges : that is easilly done with the _&quot;Select &gt; Border&quot;_ tool.

It's also possible to enhance the shadings by tuning the transparency level and increasing colors intensity.

![The egg is drawn...](/assets/blog/pictures/cartoon.png)

When sizing down the picture, don't use antialiasing so you get pixel-perfect edges on a transparent background.

## The texture

One of the reasons why I've built this egg was to be able to build a series of eggs decorated in different ways for different events.

A method to place a texture on the shell is to use the _&quot;Filters &gt; [G'MIC](http://gmic.sourceforge.net/) &gt; Deformations &gt; Fish-eye&quot;_ plug-in.

One can easily get the expected result by applying this filter to the layer where the texture is.
Although it does not distort the picture exactly as an egg, the difference is not noticeable.

![The egg is dressed up...](/assets/blog/pictures/texture.png)

## Reusing

It's over for those tips ; I allow (and encourage) whoever to reuse this picture and to modify it for a personnal or commercial usage.

Take profit of the attached Gimp source and don't hesitate to give me feedback if you're using it : I would be very happy to hear about it !

![The egg is free...](/assets/blog/pictures/egg-real.png) ![The egg is free...](/assets/blog/pictures/egg-cartoon.png)

_Download the source : [egg.xcf](/assets/blog/egg.xcf)_

## References

- Gimp - [gimp.org](http://www.gimp.org/)
- Egg shape plug-in - [gimpchat.com/viewtopic.php?f=9&amp;t=7038](http://www.gimpchat.com/viewtopic.php?f=9&amp;t=7038)
- G'MIC plug-in - [gmic.sourceforge.net](http://gmic.sourceforge.net/)
- Android Icon Design Guidelines - [developer.android.com/guide/practices/ui_guidelines/icon_design.html](https://developer.android.com/guide/practices/ui_guidelines/icon_design.html)
- French tutorials and shape template - [elledemai.blogspot.fr/2009/03/tutoriel-uf-et-cu-happy-eggs.html](http://elledemai.blogspot.fr/2009/03/tutoriel-uf-et-cu-happy-eggs.html)
- Eggs icons - [softicons.com/search?search=egg](http://www.softicons.com/search?search=egg)
- Video tutorial - [youtube.com/watch?v=0c-hMz2XpP8](https://www.youtube.com/watch?v=0c-hMz2XpP8)
- Great tutorial to texturing an egg - [gimptalk.com/index.php?/topic/1659-making-empty-broken-egg-shell-in-gimp](http://www.gimptalk.com/index.php?/topic/1659-making-empty-broken-egg-shell-in-gimp/)</content><author><name>nicobo</name></author><category term="absync" /><category term="gimp" /><category term="graphism" /><summary type="html"></summary></entry><entry><title type="html">Comment préparer un oeuf avec Gimp</title><link href="http://localhost:4000/fr/articles/un-oeuf-avec-gimp" rel="alternate" type="text/html" title="Comment préparer un oeuf avec Gimp" /><published>2013-06-15T13:44:22+02:00</published><updated>2013-06-15T13:44:22+02:00</updated><id>http://localhost:4000/fr/articles/How-to-cook-an-egg-with-a-Gimp</id><content type="html" xml:base="http://localhost:4000/fr/articles/un-oeuf-avec-gimp">![L'oeuf évolue !](/assets/blog/egg-evolution_0.png)

Voici un petit guide pour dessiner un oeuf avec [Gimp](http://www.gimp.org/).

Les techniques décrites ici permettent à la fois de dessiner un oeuf réaliste pour les boulots sérieux **(!)** et un oeuf type &quot;bande dessinée&quot;, typiquement à usage de gamification **;-)**

Vous trouverez le fichier Gimp complet en pièce jointe, que je vous invite à réutiliser ou à prendre comme source d'inspiration.

&gt; Etant un utilisateur occasionnel de Gimp, je ne garantis pas que les méthodes décrites dans cet article soient les plus appropriées.
&gt; En particulier, si vous cherchez à créer rapidement un oeuf plaqué d'une texture de votre choix, le tutoriel suivant devrait mieux vous satisfaire : [gimptalk.com/index.php?/topic/1659-making-empty-broken-egg-shell-in-gimp](http://www.gimptalk.com/index.php?/topic/1659-making-empty-broken-egg-shell-in-gimp/)


## La forme

La première étape consiste à dessiner le contour de l'oeuf.

Il existe différentes approches :

- Reprendre un modèle existant (c'est la méthode que j'ai utilisée : [elledemai.blogspot.fr/2009/03/tutoriel-uf-et-cu-happy-eggs.html](http://elledemai.blogspot.fr/2009/03/tutoriel-uf-et-cu-happy-eggs.html))
- Utiliser un plug-in dédié (ex : [gimpchat.com/viewtopic.php?f=9&amp;t=7038](http://www.gimpchat.com/viewtopic.php?f=9&amp;t=7038))
- Manipuler l'outil Ellipse en combinaison avec d'autres (non testé)
- Utiliser directement l'outil Sphere designer (non testé)
- ...

Il s'agit de l'étape la plus importante car tout le reste est basé sur ce calque.
Assurez-vous donc d'avoir la forme qui vous convient avant d'enchaîner les étapes suivantes : vérifiez notamment que la résolution est suffisante.

Si vous avez besoin d'une résolution élevée, je vous conseille de redessiner la forme dans une image différente de celle fournie avec cet article ; vous pourriez entre autres utiliser le plug-in évoqué ci-dessus.
Pour dessiner une icône d'application Android par exemple, [une résolution de 864x864 est recommandée](https://developer.android.com/guide/practices/ui_guidelines/icon_design.html#design-tips).

![L'oeuf prend forme...](/assets/blog/shape.png)


## Le volume

Le principe général pour créer une impression de volume est d'appliquer un dégradé (et oui tout n'est qu'impression dans le dessin !).

&gt; Cette partie du guide est probablement celle qui mérite le plus d'être améliorée, car elle a notamment un effet de bord non désiré : elle ternit les couleurs au lieu de seulement les assombrir. Une piste intéressante est l'outil &quot;Sphere designer&quot;, qui permet d'appliquer un éclairage réaliste très simplement (voir le lien à la fin de cet article).


### Les bords

Pour créer un effet de volume, nous allons tout d'abord sélectionner la forme de l'oeuf dessinée précédemment et appliquer le filtre _&quot;Ombre et Lumière &gt; Ombre portée&quot;_, avec un décalage nul (x=0, y=0).
Cela fait ressortir l'arrondi des bords de l'oeuf.

![L'oeuf est PLUS qu'une surface...](/assets/blog/pictures/edges.png)


### La surface

Afin de suggérer la forme rebondie de l'oeuf, nous allons ajouter un nouveau dégradé, réalisé cette fois selon une autre technique.
Il s'agit de créer un effet de lumière, puis de le transformer en assombrissement.

Pour cela, sélectionner le filtre _&quot;Light and Shadow &gt; Lighting Effects&quot;_ et ajuster les paramètres en fonction de l'aspect voulu. L'aperçu intégré dans ce plug-in est très utile.
Pour ma part j'ai aligné la source de lumière sur le centre de l'oeuf et ajusté les paramètres de telle manière qu'ils produisent une lumière diffuse s'estompant rapidement sur les bords de l'oeuf.

Une fois l'effet de lumière appliqué, choisir le menu _&quot;Couleur &gt; Couleur vers Alpha&quot;_ et sélectionner la couleur de la lumière (le blanc habituellement) : l'image devient alors un calque alpha donnant une impression de volume.

![L'oeuf est lisse...](/assets/blog/pictures/lighting-shadow.png)


## L'éclairage

Pour donner une apparence réaliste, nous allons ajouter un éclairage diffus avec l'outil _&quot;Light and Shadow &gt; Lighting Effects&quot;_.
Il est possible d'appliquer plusieurs sources de lumière en fonction de la scène dans laquelle l'oeuf sera présenté. Si l'oeuf est blanc, utiliser une autre couleur d'éclairage.

Afin de renforcer l'aspect lisse et brillant de la coquille, nous pouvons ajouter un reflet simplement composé d'un ovale blanc rendu semi-transparent.

![L'oeuf est dans la place...](/assets/blog/pictures/lighting.png)


## L'effet B.D.

En général on peut donner un effet &quot;bande dessinée&quot; à un dessin en accentuant les traits.

Dans le cas de notre oeuf, la première chose à faire consiste à augmenter l'épaisseur du contour, ce qui est très facilement réalisé par le menu _Sélection &gt; Bordure&quot;_.

Il est également possible d'accentuer les dégradés en jouant sur le taux de transparence et d'intensifier les couleurs pour les faire ressortir.

![L'oeuf est dessiné...](/assets/blog/pictures/cartoon.png)

Lors du redimensionnement de l'image vers une taille plus petite, ne pas utiliser de lissage, afin d'obtenir un contour net sur un fond transparent.


## La texture

L'une des raisons pour laquelle je me suis lancé dans cette entreprise était de pouvoir fabriquer une série d'oeufs décorés de manière originale pour différentes occasions.

Une méthode pour plaquer une texture sur l'oeuf est d'exploiter le plug-in _&quot;Filters &gt; [G'MIC](http://gmic.sourceforge.net/) &gt; Deformations &gt; Fish-eye&quot;_.

On peut obtenir facilement l'effet attendu en appliquant ce filtre à un calque contenant la texture.
Bien que cet effet ne déforme pas l'image exactement selon la forme d'un oeuf, la différence n'est pas notable à l'oeil nu.

![L'oeuf est bien habillé...](/assets/blog/pictures/texture.png)


## Réutilisation

Voilà pour les quelques conseils ; j'autorise (et j'encourage) quiconque à réutiliser cette image, et à la modifier pour usage personnel ou commercial.

Tirez profit de l'image source au format Gimp jointe à cet article et n'hésitez pas à me remonter vos commentaires, je serais très heureux d'avoir vos retours !

![L'oeuf est libre...](/assets/blog/pictures/egg-real.png)![L'oeuf est libre...](/assets/blog/pictures/egg-cartoon.png)

_Télécharger le fichier source : [egg.xcf](/assets/blog/egg.xcf)_


## Références

- Gimp - [gimp.org](http://www.gimp.org/)
- Plug-in &quot;oeuf&quot; - [gimpchat.com/viewtopic.php?f=9&amp;t=7038](http://www.gimpchat.com/viewtopic.php?f=9&amp;t=7038)
- Plug-in G'MIC - [gmic.sourceforge.net](http://gmic.sourceforge.net/)
- Android Icon Design Guidelines - [developer.android.com/guide/practices/ui_guidelines/icon_design.html](https://developer.android.com/guide/practices/ui_guidelines/icon_design.html)
- Tutoriels en français et modèle de forme - [elledemai.blogspot.fr/2009/03/tutoriel-uf-et-cu-happy-eggs.html](http://elledemai.blogspot.fr/2009/03/tutoriel-uf-et-cu-happy-eggs.html)
- Icônes d'oeuf - [softicons.com/search?search=egg](http://www.softicons.com/search?search=egg)
- Tutoriel vidéo - [youtube.com/watch?v=0c-hMz2XpP8](https://www.youtube.com/watch?v=0c-hMz2XpP8)
- Super guide pour plaquer une texture - [gimptalk.com/index.php?/topic/1659-making-empty-broken-egg-shell-in-gimp](http://www.gimptalk.com/index.php?/topic/1659-making-empty-broken-egg-shell-in-gimp/)</content><author><name>nicobo</name></author><category term="absync" /><category term="gimp" /><category term="graphism" /><summary type="html"></summary></entry><entry><title type="html">Version control integration for Ubuntu 12.04</title><link href="http://localhost:4000/2012/Version-control-integration-for-Ubuntu-12.04" rel="alternate" type="text/html" title="Version control integration for Ubuntu 12.04" /><published>2012-09-22T14:28:15+02:00</published><updated>2012-09-22T14:28:15+02:00</updated><id>http://localhost:4000/2012/Version-control-integration-for-Ubuntu-12.04</id><content type="html" xml:base="http://localhost:4000/2012/Version-control-integration-for-Ubuntu-12.04">I've been used to great *Eclipse* plugins to deal with SVN-versionned projects for a long time.

Nowadays I'm using **Mercurial** (a.k.a. *Hg*) a lot and it became more handy to me to use *Tortoise*-like products, which integrate directly into the OS' file manager.

I've come to use the following solutions for the different platforms I'm working with (on Ubuntu 12.04).


### Mercurial for Nautilus

*TortoiseHg* works fine, but I had to add a script to have the corresponding &quot;Actions&quot; menu with a right click on a file : [hg.ice-os.com/nautilus_mercurial_scripts](http://hg.ice-os.com/nautilus_mercurial_scripts/)


### Mercurial for Dolphin

After some problems copying big files through USB and others, I realized that Nautilus was prone to copy errors so I decided to get back to Konqueror / Dolphin.

Unfortunately, Dolphin is not as much advanced as Konqueror was in KDE 3.x, so I also had to find a way to add a &quot;Service Menu&quot; for TortoiseHg : [bitbucket.org/tortoisehg/hgtk/issue/1270/better-integration-in-kde4](https://bitbucket.org/tortoisehg/hgtk/issue/1270/better-integration-in-kde4)


### Git for Nautilus

*RabbitVCS* looks nice, but I've not tested it a lot : [www.rabbitvcs.org](http://www.rabbitvcs.org/)


## Links

- Dolphin service menu for Tortoise HG - [gist.github.com/3765877](https://gist.github.com/3765877)
- Nautilus actions menu for Tortoise HG - [hg.ice-os.com/nautilus_mercurial_scripts/](http://hg.ice-os.com/nautilus_mercurial_scripts/)</content><author><name>nicobo</name></author><category term="hg" /><category term="Ubuntu" /><category term="eclipse" /><summary type="html">I’ve been used to great Eclipse plugins to deal with SVN-versionned projects for a long time.</summary></entry></feed>